#lang racket/base

(provide (all-defined-out))

(define (random-polys/quad N)
  (define cprg (current-pseudo-random-generator))
  (define scale 32000.0)
  (define count (min N 1000))
  (for/list ([i (in-range 0 count)])
    (define a (random cprg))
    (define b (random cprg))
    (define A (* scale (random cprg)))
    (define B (* scale (random cprg)))
    (define ca (* A B))
    (define cb (- (+ (* A b) (* a B))))
    (define cc (* a b))
    (list ca cb cc)))

(define (random-polys/cubic N)
  (define cprg (current-pseudo-random-generator))
  (define scale 32000.0)
  (define count (min N 1000))
  (for/list ([i (in-range 0 count)])
    (define a (random cprg))
    (define b (random cprg))
    (define c (random cprg))
    (define A (* scale (random cprg)))
    (define cb (* A (- a b c)))
    (define cc (* A (+ (* a b) (* a c) (* b c))))
    (define cd (* (- A) a b c))
    (list A cb cc cd)))

(define (random-polys/quart N)
  (define cprg (current-pseudo-random-generator))
  (define scale 32000.0)
  (define count (min N 1000))
  (for/list ([i (in-range 0 count)])
    (define a (random cprg))
    (define b (random cprg))
    (define c (random cprg))
    (define d (random cprg))
    (define A (* scale (random cprg)))
    (define c1 (* A (- a b c d)))
    (define c2 (* A (+ (* a b) (* a c) (* b c) (* a d) (* b d) (* c d))))
    (define c3 (* (- A) (+ (* a b c) (* a b d) (* a c d) (* b c d))))
    (define c4 (* (- A) a b c d))
    (list A c1 c2 c3 c4)))

(define (random-polys/quint N)
  (define cprg (current-pseudo-random-generator))
  (define scale 32000.0)
  (define count (min N 1000))
  (for/list ([i (in-range 0 count)])
    (define a (random cprg))
    (define b (random cprg))
    (define c (random cprg))
    (define d (random cprg))
    (define e (random cprg))
    (define A (* scale (random cprg)))
    (define ab (* a b))
    (define cd (* c d))
    (define fc (- A (* ab cd e)))
    (define ec (* A (+ (* ab cd) (* ab c e) (* ab d e) (* a cd e) (* b cd e))))
    (define dc (* A (- (* ab c) (* ab d) (* a cd) (* b cd) (* ab e)
                       (* a c e) (* b c e) (* a d e) (* b d e) (* cd e))))
    (define cc (* A (+ ab (* a c) (* b c) (* a d) (* b d) (* d c) (* a e)
                       (* b e) (* c e) (* d e))))
    (define bc (* A (- a b c d e)))
    (list A bc cc dc ec fc)))
